# Unified Media Converter v7 - Setup Configuration

[metadata]
name = unified-media-converter
version = 1.0.0
description = Professional audio and video converter with advanced parametric EQ capabilities
long_description = file: README.md
long_description_content_type = text/markdown
url = https://github.com/unified-media-converter/unified-media-converter
author = Siyabonga Blessing Phakathi
author_email = datoxic0@gmail.com
license = MIT
license_files = LICENSE
classifiers =
    License :: OSI Approved :: MIT License
    Programming Language :: Python :: 3
    Programming Language :: Python :: 3.8
    Programming Language :: Python :: 3.9
    Programming Language :: Python :: 3.10
    Programming Language :: Python :: 3.11
    Programming Language :: Python :: 3.12
    Development Status :: 5 - Production/Stable
    Environment :: X11 Applications :: Qt
    Intended Audience :: End Users/Desktop
    Intended Audience :: Developers
    Natural Language :: English
    Operating System :: OS Independent
    Topic :: Multimedia :: Sound/Audio :: Conversion
    Topic :: Multimedia :: Video :: Conversion
    Topic :: Scientific/Engineering :: Visualization
keywords = media, converter, audio, video, ffmpeg, eq, equalizer, dsp
project_urls =
    Bug Reports = https://github.com/unified-media-converter/unified-media-converter/issues
    Documentation = https://github.com/unified-media-converter/unified-media-converter/blob/main/README.md
    Source = https://github.com/unified-media-converter/unified-media-converter

[options]
packages = find:
python_requires = >=3.8
install_requires =
    ffmpeg-python>=0.2.0
    numpy>=1.21.0
    matplotlib>=3.4.0
    simpleaudio>=1.0.0
    tkinterdnd2>=0.3.0
include_package_data = True

[options.packages.find]
where = src

[options.entry_points]
console_scripts =
    unified-media-converter = unified_media_converter.__main__:main

[options.extras_require]
dev =
    pytest>=6.0
    black>=21.0
    flake8>=3.8
    isort>=5.8
    mypy>=0.812
    pre-commit>=2.13
    pyupgrade>=2.19
    bandit>=1.7
    pydocstyle>=6.1
test =
    pytest>=6.0
    pytest-cov>=2.12
    pytest-mock>=3.6
docs =
    sphinx>=4.0
    sphinx-rtd-theme>=0.5
build =
    pyinstaller>=5.0.0
    cx_Freeze>=6.10.0

[bdist_wheel]
universal = 1

[tool:pytest]
minversion = 6.0
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*
addopts = 
    --verbose
    --tb=short
    --strict-markers
    --strict-config
markers =
    slow: marks tests as slow (deselect with '-m "not slow"')
    integration: marks tests as integration tests
    unit: marks tests as unit tests
filterwarnings =
    error
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning

[flake8]
max-line-length = 88
extend-ignore = 
    E203  # Whitespace before ':'
    W503  # Line break occurred before a binary operator
per-file-ignores = 
    __init__.py:F401  # imported but unused in __init__.py
exclude = 
    .git
    __pycache__
    build
    dist
    .eggs
    *.egg
    venv
    .venv
    .tox
    .mypy_cache
    .pytest_cache

[isort]
profile = black
multi_line_output = 3
line_length = 88
known_first_party = unified_media_converter
known_third_party = dataclasses,json,math,matplotlib,numpy,os,pathlib,queue,shlex,shutil,simpleaudio,subprocess,sys,tempfile,threading,time,tkinter,traceback,typing,wave

[mypy]
python_version = 3.8
warn_return_any = True
warn_unused_configs = True
disallow_untyped_defs = True
disallow_incomplete_defs = True
check_untyped_defs = True
disallow_untyped_decorators = True
warn_redundant_casts = True
warn_unused_ignores = True
warn_no_return = True
warn_unreachable = True
strict_optional = True
implicit_reexport = False
strict_equality = True

[[tool.mypy.overrides]]
module = 
    ffmpeg.*
    matplotlib.*
    numpy.*
    simpleaudio.*
    tkinter.*
    tkinterdnd2.*
ignore_missing_imports = True

[coverage:run]
branch = True

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
